#+TITLE: \Large{You can give a developer an error message ...}
#+SUBTITLE: /but you can't force them to understand it./
#+AUTHOR: Gavin Gray
#+DATE: 10.08.2022
#+OPTIONS: toc:nil num:nil
#+LATEX_CLASS_OPTIONS: [11pt]
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[bitstream-charter]{mathdesign}
#+LATEX_HEADER: \usepackage[margin=2.0in]{geometry}
#+LATEX_HEADER: \usepackage[backend=bibtex]{biblatex}
#+LATEX_HEADER: \bibliography{aquascope.bib}

Despite many efforts, Rust retains its steep learning curve. One area where the Rust compiler excels is in its delivery of error messages. However, a well crafted error message can still be confusing to a novice developer in the face of new concepts such as borrowing and lifetimes. Suggestions on how to fix the problem made by the compiler are often helpful in trivial cases but situations caused by a deeper misunderstanding of the type system can still leave learners confused.

I propose one way to overcome this issue is a set of visualizations that target
developer specific problems. Take for example the concept of ownership and
borrowing: an initial design that comes to mind is a permission-flow graph
displayed when you, the developer,  hover over a value. This way, when a learner
runs into the issue of ~cannot borrow 'var' as mutable, as it is behind a
`&` reference~, the visualization can show that only partial permission has
flowed in to the current context, and requires mutable permission. In a trivial
case such as this, a visualization may not be necessary, but at least it may
provide more insight on how developers can build an intuition of how permissions
are pushed and pulled throughout a Rust program. This was of course a
theoretical example and the concrete visualizations make up part of the project
work.

<<Outcome Goal>>
My goal for this project is to leverage static information in order to give the user a set of visualizations that will simplify understanding errors, and ultimately, facilitate learning. Specifically, such a visualization should /make errors obvious to learners/. Visualizations should require minimal knowledge in order to understand them; one could imagine a version of the Rust Book which includes such visualizations alongside code snippets to reinforce the learning of difficult concepts.

*** Learning Outcomes

I believe working on this project will provide me the opportunity to expand my knowledge in the following domains:
- /Compilers/ : Working with the information that the Rust compiler provides will give me some extra compiler experience; particularly, some more real-world compiler experience that can refine my notion of Rust semantics and typing.
- /Education/ : Tools which vomit all the compiler information on users are unhelpful. All this information isn't pertinent to the problem at hand and can be distracting for learners or when someone is looking for specific information. Trying to display information for what a user wants, especially if that user is new to the language, is something I've never focused on before. This learning objective is one of the reasons I specifically reached out to Shriram.

*** Previous Work

Visualizing Rust lifetimes and other concepts is not a new idea. There have been
several attempts \cite{BLASER} \cite{RUSTVIZ}, long discussions on Rust forums
\cite{RUST-INTERN}, and blog posts written about the idea
\cite{BLOG-1}\cite{BLOG-2}. However, one thing that these projects fail to
capture is education. The people behind these ideas and projects are themselves
experts, and as such, they create tools that other experienced developers would
like to see. Another pitfall is they try to include too much information in a
visualization, which makes it cluttered and difficult to interpret. In my
project, the main focus is on education and how these visualizations can
facilitate learning Rust. Thus reinforcing the main goal of he project which is
Rust education.

* References
:PROPERTIES:
:UNNUMBERED: t
:END:
#+LATEX: \printbibliography[heading=none]
